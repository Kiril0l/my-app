{"version":3,"file":"static/js/685.46e1875e.chunk.js","mappings":"gMACA,G,QAA0B,0BAA1B,EAA8D,0BAA9D,EAAsG,6B,mBCWtG,EARmB,SAACA,GAChB,OACI,0BACI,SAAC,KAAD,CAASC,GAAI,YAAcD,EAAME,GAAIC,UAAWC,EAAhD,SAAuEJ,EAAMK,UCEzF,EANiB,SAACL,GACd,OACI,yBAAMA,EAAMM,QCwCpB,EAvCgB,SAACN,GAEb,IAAIO,EAAkBP,EAAMQ,QAAQC,KAChC,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYR,GAAIQ,EAAER,GAAIG,KAAMK,EAAEL,MAAWK,EAAER,OAGhDS,EAAmBX,EAAMY,SAASH,KAClC,SAAAI,GAAC,OAAI,SAAC,EAAD,CAAUP,KAAMO,EAAEC,SAAcD,EAAEX,OAe3C,OACI,iBAAKC,UAAWC,EAAhB,WACI,yBACKG,KAEL,gBAAKJ,UAAWC,EAAhB,SACKO,KAEL,oBACA,4BACI,qBAAUN,KAAK,UAAUU,KAAK,KAAKC,KAAK,IAAIC,SAlBlC,SAACC,GACnB,IAAIZ,EAAOY,EAAMC,OAAOC,MACxBpB,EAAMqB,kBAAkBf,IAgBuDc,MAAOpB,EAAMsB,kBACpF,mBAAQC,QAvBE,WAClBvB,EAAMwB,iBAsBE,yBC2BhB,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KApBkB,SAACC,GACnB,MAAO,CACHf,SAAUe,EAAMC,YAAYhB,SAC5BJ,QAASmB,EAAMC,YAAYpB,QAC3Bc,eAAgBK,EAAMC,YAAYN,mBAIjB,SAACO,GACtB,MAAO,CACHR,kBAAmB,SAACf,GAChBuB,GAASC,EAAAA,EAAAA,IAA+BxB,KAE5CkB,cAAe,WACXK,GAASE,EAAAA,EAAAA,YAOjBC,EAAAA,EAFJ,CAGEC,I,gGClEEC,EAA6B,SAACP,GAC9B,MAAO,CACHQ,OAAQR,EAAMS,KAAKD,SAIdH,EAAoB,SAACK,GAO9B,OAFqCX,EAAAA,EAAAA,IAAQQ,EAARR,EAJb,SAAC1B,GACrB,OAAKA,EAAMmC,QACJ,SAACE,GAAD,UAAerC,KADI,SAAC,KAAD,CAAUC,GAAI","sources":["webpack://mmy-app/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogName/DialogsName.jsx","components/Dialogs/Messages/Messages.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthContainer.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__-v19q\",\"messages\":\"Dialogs_messages__Ibx7r\",\"navlinkname\":\"Dialogs_navlinkname__tr+Vx\"};","import cssStyle from '../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nconst DialogName = (props) => {\r\n    return (\r\n        <div>\r\n            <NavLink to={\"/dialogs/\" + props.id} className={cssStyle.navlinkname}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogName;","import cssStyle from '../Dialogs.module.css'\r\n\r\n\r\nconst Messages = (props) => {\r\n    return (\r\n        <div>{props.text}</div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import React from 'react'\r\nimport { Navigate } from 'react-router-dom'\r\nimport DialogName from './DialogName/DialogsName'\r\nimport cssStyle from './Dialogs.module.css'\r\nimport Messages from './Messages/Messages'\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let dialogsElements = props.dialogs.map(\r\n        d => <DialogName id={d.id} name={d.name} key={d.id} />\r\n    )\r\n\r\n    let messagesElements = props.messages.map(\r\n        m => <Messages text={m.message} key={m.id} />\r\n    )\r\n\r\n    let onAddNewMessage = () => {\r\n        props.addNewMessage()\r\n    }\r\n\r\n    let onMessageChange = (event) => {\r\n        let text = event.target.value\r\n        props.updateMessageText(text)\r\n        // event - в этот параметр приходит, что в нашем textarea происходят изменения(ввод символов). \r\n        // И эти изменения мы уже передаем в нашу БД, чтоб записать и отобразить для пользователя\r\n        // props.dispatch(updateMessageTextActionCreater(text))\r\n    }\r\n\r\n    return (\r\n        <div className={cssStyle.dialogs}>\r\n            <div>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={cssStyle.messages}>\r\n                {messagesElements}\r\n            </div>\r\n            <div></div>\r\n            <div>\r\n                <textarea name=\"message\" cols=\"50\" rows=\"2\" onChange={onMessageChange} value={props.newMessageText} ></textarea>\r\n                <button onClick={onAddNewMessage}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { WithAuthContainer } from '../../hoc/withAuthContainer'\r\nimport { addNewMessageActionCreater, updateMessageTextActionCreater } from '../../redux/dialogsReducer'\r\nimport Dialogs from './Dialogs'\r\n\r\n// const DialogsContainer = (props) => {\r\n\r\n// let state = props.store.getState()\r\n\r\n// let addNewMessage = () => {\r\n//     props.store.dispatch(addNewMessageActionCreater())\r\n// }\r\n\r\n// let onMessageChange = (text) => {\r\n//     // event - в этот параметр приходит, что в нашем textarea происходят изменения(ввод символов). \r\n//     // И эти изменения мы уже передаем в нашу БД, чтоб записать и отобразить для пользователя\r\n//     props.store.dispatch(updateMessageTextActionCreater(text))\r\n// }\r\n\r\n//     return (\r\n//         <Context.Consumer>{\r\n//             (store) => {\r\n//                 let state = store.getState()\r\n//                 let addNewMessage = () => {\r\n//                     store.dispatch(addNewMessageActionCreater())\r\n//                 }\r\n\r\n//                 let onMessageChange = (text) => {\r\n//                     // event - в этот параметр приходит, что в нашем textarea происходят изменения(ввод символов). \r\n//                     // И эти изменения мы уже передаем в нашу БД, чтоб записать и отобразить для пользователя\r\n//                     store.dispatch(updateMessageTextActionCreater(text))\r\n//                 }\r\n//                 return <Dialogs\r\n//                     updateMessageText={onMessageChange}\r\n//                     addNewMessage={addNewMessage}\r\n//                     dialogs={state.dialogsPage.dialogs}\r\n//                     messages={state.dialogsPage.messages}\r\n//                     newMessageText={state.dialogsPage.newMessageText} />\r\n//             }\r\n\r\n//         }\r\n\r\n//         </Context.Consumer>\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        messages: state.dialogsPage.messages,\r\n        dialogs: state.dialogsPage.dialogs,\r\n        newMessageText: state.dialogsPage.newMessageText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        updateMessageText: (text) => {\r\n            dispatch(updateMessageTextActionCreater(text))\r\n        },\r\n        addNewMessage: () => {\r\n            dispatch(addNewMessageActionCreater())\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthContainer,\r\n)(Dialogs)\r\n\r\n// const AuthContainerComponent = WithAuthContainer(Dialogs)\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthContainerComponent)\r\n","import { connect } from \"react-redux\"\r\nimport { Navigate } from \"react-router-dom\"\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport const WithAuthContainer = (Component) => {\r\n    let RedirectComponent = (props) => {\r\n        if (!props.isAuth) return <Navigate to={\"/login\"} />\r\n        return <Component {...props} />\r\n    }\r\n    const RedirectComponentWithConnect = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    \r\n    return RedirectComponentWithConnect\r\n}"],"names":["props","to","id","className","cssStyle","name","text","dialogsElements","dialogs","map","d","messagesElements","messages","m","message","cols","rows","onChange","event","target","value","updateMessageText","newMessageText","onClick","addNewMessage","compose","connect","state","dialogsPage","dispatch","updateMessageTextActionCreater","addNewMessageActionCreater","WithAuthContainer","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component"],"sourceRoot":""}