{"version":3,"file":"static/js/797.5265b2d2.chunk.js","mappings":"sLAwGA,WAAeA,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAY,CAChCC,OAAQD,EAAME,KAAKD,OACnBE,QAASH,EAAME,KAAKE,cAEgB,CAAEC,kBAAAA,EAAAA,IAA1C,EA/Fc,SAACC,GAEX,IAAqB,IAAjBA,EAAML,OACN,OAAO,SAAC,KAAD,CAAUM,SAAO,EAACC,GAAI,aAGjC,IAAMC,EAAkBC,EAAAA,KAAaC,MAAM,CACvCC,MAAOF,EAAAA,KAAaG,UAAU,4GAAuBC,SAAS,qGAC9DC,SAAUL,EAAAA,KAAaG,UAAU,4GAAuBC,SAAS,uGAGrE,OAAO,SAAC,KAAD,CACHE,cAAe,CACXJ,MAAO,GACPG,SAAU,GACVE,WAAW,GAGfC,gBAAc,EACdC,SAAU,SAACC,EAAQC,GACff,EAAMD,kBAAkBe,EAAOR,MAAOQ,EAAOL,SACzCK,EAAOH,UAAWI,EAAcC,UAAWD,EAAcE,cAAeH,EAAOjB,SACnFkB,EAAcE,eAAc,IAEhCC,iBAAkBf,EAbf,SAeF,gBAAGW,EAAH,EAAGA,OAAQK,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,WAAYC,EAAxC,EAAwCA,aAAcC,EAAtD,EAAsDA,OAAQC,EAA9D,EAA8DA,aAAcC,EAA5E,EAA4EA,aAA5E,OACG,4BACI,mCAGA,gBAAKC,UAAWC,EAAAA,EAAAA,UAAhB,SACKJ,IAAU,4BACP,uBAAIA,EAAO,MACX,uBAAIA,EAAO,WAGnB,wBACI,SAAC,KAAD,CACIK,YAAa,QACbC,KAAM,OACNC,KAAM,QACNC,SAAUT,EACVU,OAAQX,EACRY,MAAOnB,EAAOR,UAGrBc,EAAQd,OAASa,EAAOb,QAAS,uBAAIa,EAAOb,SAC7C,wBACI,SAAC,KAAD,CACIsB,YAAa,WACbC,KAAM,WACNC,KAAM,WACNC,SAAUT,EACVU,OAAQX,EACRY,MAAOnB,EAAOL,aAGrBW,EAAQX,UAAYU,EAAOV,WAAY,uBAAIU,EAAOV,YACnD,0BACI,kBAAOyB,QAAS,YAAhB,0BACA,SAAC,KAAD,CACIL,KAAM,WACNC,KAAM,YACNK,UAAW,cAGnB,2BACKnC,EAAMH,UAAW,gBAAKuC,IAAKpC,EAAMH,WAClC,yBACCG,EAAMH,UAAW,SAAC,KAAD,CACd+B,YAAa,0BACbC,KAAM,OACNC,KAAM,UACNC,SAAUT,EACVU,OAAQX,EACRY,MAAOnB,EAAOjB,gBAItB,mBACIwC,SAAUZ,EACVa,QAASd,EACTK,KAAM,SAHV","sources":["components/Login/Login.jsx"],"sourcesContent":["import { Field, Formik } from 'formik'\r\nimport { connect } from 'react-redux'\r\nimport * as yup from 'yup'\r\nimport { logInThunkCreator } from '../../redux/authReducer'\r\nimport { Navigate } from \"react-router-dom\"\r\nimport cssStyle from \"./../Header/Header.module.css\"\r\n\r\n\r\n\r\nconst Login = (props) => {\r\n\r\n    if (props.isAuth === true) {\r\n        return <Navigate replace to={\"/profile\"} />\r\n    }\r\n\r\n    const validationShema = yup.object().shape({\r\n        email: yup.string().typeError('Должно быть строкой').required(\"обязательное поле\"),\r\n        password: yup.string().typeError('Должно быть строкой').required(\"обязательное поле\"),\r\n    })\r\n\r\n    return <Formik\r\n        initialValues={{\r\n            email: '',\r\n            password: '',\r\n            remembrMe: false,\r\n            // captcha: null\r\n        }}\r\n        validateOnBlur\r\n        onSubmit={(values, onSubmitProps) => {\r\n            props.logInThunkCreator(values.email, values.password,\r\n                values.remembrMe, onSubmitProps.setStatus, onSubmitProps.setSubmitting, values.captcha)\r\n            onSubmitProps.setSubmitting(true)\r\n        }}\r\n        validationSchema={validationShema}\r\n    >\r\n        {({ values, errors, touched, handleBlur, handleChange, status, handleSubmit, isSubmitting }) => (\r\n            <div>\r\n                <h1>\r\n                    Login\r\n                </h1>\r\n                <div className={cssStyle.errorText}>\r\n                    {status && <div>\r\n                        <p>{status[0]}</p>\r\n                        <p>{status[1]}</p>\r\n                    </div>}\r\n                </div>\r\n                <p>\r\n                    <Field\r\n                        placeholder={'Email'}\r\n                        type={\"text\"}\r\n                        name={'email'}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.email}\r\n                    />\r\n                </p>\r\n                {touched.email && errors.email && <p>{errors.email}</p>}\r\n                <p>\r\n                    <Field\r\n                        placeholder={'Password'}\r\n                        type={\"password\"}\r\n                        name={'password'}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.password}\r\n                    />\r\n                </p>\r\n                {touched.password && errors.password && <p>{errors.password}</p>}\r\n                <p>\r\n                    <label htmlFor={\"remembrMe\"}>Remember me</label>\r\n                    <Field\r\n                        type={\"checkbox\"}\r\n                        name={'remembrMe'}\r\n                        component={'input'}\r\n                    />\r\n                </p>\r\n                <div>\r\n                    {props.captcha && <img src={props.captcha} />}\r\n                    <div>\r\n                    {props.captcha && <Field\r\n                        placeholder={'Please validate captcha'}\r\n                        type={\"text\"}\r\n                        name={'captcha'}\r\n                        onChange={handleChange}\r\n                        onBlur={handleBlur}\r\n                        value={values.captcha}\r\n                    />}\r\n                    </div>\r\n                </div>\r\n                <button\r\n                    disabled={isSubmitting}\r\n                    onClick={handleSubmit}\r\n                    type={'submit'}\r\n                >Log in</button>\r\n            </div>\r\n        )}\r\n\r\n    </Formik>\r\n\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    isAuth: state.auth.isAuth,\r\n    captcha: state.auth.captchaUrl\r\n})\r\nexport default connect(mapStateToProps, { logInThunkCreator })(Login)\r\n\r\n\r\n\r\n"],"names":["connect","state","isAuth","auth","captcha","captchaUrl","logInThunkCreator","props","replace","to","validationShema","yup","shape","email","typeError","required","password","initialValues","remembrMe","validateOnBlur","onSubmit","values","onSubmitProps","setStatus","setSubmitting","validationSchema","errors","touched","handleBlur","handleChange","status","handleSubmit","isSubmitting","className","cssStyle","placeholder","type","name","onChange","onBlur","value","htmlFor","component","src","disabled","onClick"],"sourceRoot":""}